// datasource db defines the database connection settings.
// It is configured for PostgreSQL and uses an environment variable for the connection URL.
// The 'extensions' feature enables the use of PostgreSQL-specific data types.
datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
}

// generator db configures Prisma Client settings.
// It is set up to use Prisma Client Python with asyncio interface and specific features.
generator db {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
  previewFeatures      = ["postgresqlExtensions"]
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      UserRole

  Drafts         Draft[]
  EmailCampaigns EmailCampaign[]
}

model Feature {
  id          String   @id @default(cuid())
  name        String
  description String
  createdAt   DateTime @default(now())

  AIModels  AIModel[]
  Templates Template[]
}

model AIModel {
  id        String    @id @default(cuid())
  modelType ModelType
  createdAt DateTime  @default(now())
  Feature   Feature   @relation(fields: [featureId], references: [id])
  featureId String

  Drafts Draft[]
}

model Draft {
  id        String      @id @default(cuid())
  content   String
  status    DraftStatus
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  userId    String
  User      User        @relation(fields: [userId], references: [id])
  modelId   String
  AIModel   AIModel     @relation(fields: [modelId], references: [id])

  Edits Edit[]
}

model Template {
  id        String   @id @default(cuid())
  content   String
  category  String
  createdAt DateTime @default(now())
  Feature   Feature  @relation(fields: [featureId], references: [id])
  featureId String
}

model Edit {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  draftId   String
  Draft     Draft    @relation(fields: [draftId], references: [id])
}

model EmailCampaign {
  id        String    @id @default(cuid())
  subject   String
  content   String
  sentAt    DateTime?
  createdAt DateTime  @default(now())
  userId    String
  User      User      @relation(fields: [userId], references: [id])

  Metrics CampaignMetric[]
}

model CampaignMetric {
  id              String        @id @default(cuid())
  emailCampaignId String
  openRate        Float
  conversionRate  Float
  createdAt       DateTime      @default(now())
  EmailCampaign   EmailCampaign @relation(fields: [emailCampaignId], references: [id])
}

enum UserRole {
  ADMINISTRATOR
  EDITOR
  VIEWER
  ANALYST
}

enum ModelType {
  GPT_4_TURBO
  CUSTOM_CHECKER
}

enum DraftStatus {
  GENERATED
  EDITED
  FINALIZED
}

