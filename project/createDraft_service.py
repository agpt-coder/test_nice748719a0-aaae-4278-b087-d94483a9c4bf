from typing import Optional

import prisma
import prisma.models
from pydantic import BaseModel


class CreateDraftResponse(BaseModel):
    """
    Response model returned after creating a new draft, indicating success and providing the draft ID.
    """

    draftId: str
    created: bool


async def createDraft(
    content: str, modelId: Optional[str], userId: str
) -> CreateDraftResponse:
    """
    Creates a new draft with initial content generated by AI or input manually by users. This endpoint mirrors the capability of AI integrations like gpt-4-turbo to generate initial draft content. Input: {content: string}, Response: {draftId: string, created: boolean}.

    Args:
        content (str): The initial content of the draft that could either be AI-generated or input manually by the user.
        modelId (Optional[str]): The ID of the AI model used to generate the draft content. Null if the content is manually entered.
        userId (str): The ID of the user who is creating the draft. This should be retrieved from session or auth context.

    Returns:
        CreateDraftResponse: Response model returned after creating a new draft, indicating success and providing the draft ID.
    """
    user = await prisma.models.User.prisma().find_unique(where={"id": userId})
    if not user:
        raise ValueError("User ID does not exist in the database.")
    draft = await prisma.models.Draft.prisma().create(
        data={
            "content": content,
            "status": "GENERATED",
            "userId": userId,
            "modelId": modelId or None,
        }
    )
    response = CreateDraftResponse(draftId=draft.id, created=True)
    return response
