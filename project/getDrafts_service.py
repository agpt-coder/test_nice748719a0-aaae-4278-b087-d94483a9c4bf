from typing import List

import prisma
import prisma.models
from pydantic import BaseModel


class GetDraftsRequest(BaseModel):
    """
    Request model for retrieving all drafts. No parameters are needed since it fetches all available drafts.
    """

    pass


class DraftInfo(BaseModel):
    """
    Detailed information about an individual draft.
    """

    draftId: str
    content: str
    editable: bool


class GetDraftsResponse(BaseModel):
    """
    Response model containing a list of drafts. Each draft includes an ID, content, and a flag indicating whether the draft is editable.
    """

    drafts: List[DraftInfo]


async def getDrafts(request: GetDraftsRequest) -> GetDraftsResponse:
    """
    Retrieves a list of all editable drafts generated by the AI Writing Module. Each draft includes unique identifiers and editable content fields, making it easier for users to select and modify. Expected response structure: [{draftId: string, content: string, editable: boolean}].

    Args:
    request (GetDraftsRequest): Request model for retrieving all drafts. No parameters are needed since it fetches all available drafts.

    Returns:
    GetDraftsResponse: Response model containing a list of drafts. Each draft includes an ID, content, and a flag indicating whether the draft is editable.
    """
    editable_drafts = await prisma.models.Draft.prisma().find_many(
        where={"status": "EDITED"}
    )
    draft_infos = [
        DraftInfo(draftId=draft.id, content=draft.content, editable=True)
        for draft in editable_drafts
    ]
    response = GetDraftsResponse(drafts=draft_infos)
    return response
